// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: rpc.proto

package grpcserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCServerClient is the client API for GRPCServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCServerClient interface {
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	GetSubsystems(ctx context.Context, in *GetSubsystemsRequest, opts ...grpc.CallOption) (*GetSusbsytemsResponse, error)
	EnableSubsystem(ctx context.Context, in *GenericSubsystemRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	DisableSubsystem(ctx context.Context, in *GenericSubsystemRequest, opts ...grpc.CallOption) (*GenericResponse, error)
}

type gRPCServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCServerClient(cc grpc.ClientConnInterface) GRPCServerClient {
	return &gRPCServerClient{cc}
}

func (c *gRPCServerClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServerClient) GetSubsystems(ctx context.Context, in *GetSubsystemsRequest, opts ...grpc.CallOption) (*GetSusbsytemsResponse, error) {
	out := new(GetSusbsytemsResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/GetSubsystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServerClient) EnableSubsystem(ctx context.Context, in *GenericSubsystemRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/EnableSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServerClient) DisableSubsystem(ctx context.Context, in *GenericSubsystemRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/DisableSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCServerServer is the server API for GRPCServer service.
// All implementations must embed UnimplementedGRPCServerServer
// for forward compatibility
type GRPCServerServer interface {
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	GetSubsystems(context.Context, *GetSubsystemsRequest) (*GetSusbsytemsResponse, error)
	EnableSubsystem(context.Context, *GenericSubsystemRequest) (*GenericResponse, error)
	DisableSubsystem(context.Context, *GenericSubsystemRequest) (*GenericResponse, error)
	mustEmbedUnimplementedGRPCServerServer()
}

// UnimplementedGRPCServerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCServerServer struct {
}

func (UnimplementedGRPCServerServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedGRPCServerServer) GetSubsystems(context.Context, *GetSubsystemsRequest) (*GetSusbsytemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubsystems not implemented")
}
func (UnimplementedGRPCServerServer) EnableSubsystem(context.Context, *GenericSubsystemRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSubsystem not implemented")
}
func (UnimplementedGRPCServerServer) DisableSubsystem(context.Context, *GenericSubsystemRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSubsystem not implemented")
}
func (UnimplementedGRPCServerServer) mustEmbedUnimplementedGRPCServerServer() {}

// UnsafeGRPCServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCServerServer will
// result in compilation errors.
type UnsafeGRPCServerServer interface {
	mustEmbedUnimplementedGRPCServerServer()
}

func RegisterGRPCServerServer(s grpc.ServiceRegistrar, srv GRPCServerServer) {
	s.RegisterService(&GRPCServer_ServiceDesc, srv)
}

func _GRPCServer_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCServer_GetSubsystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubsystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).GetSubsystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/GetSubsystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).GetSubsystems(ctx, req.(*GetSubsystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCServer_EnableSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).EnableSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/EnableSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).EnableSubsystem(ctx, req.(*GenericSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCServer_DisableSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericSubsystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).DisableSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/DisableSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).DisableSubsystem(ctx, req.(*GenericSubsystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCServer_ServiceDesc is the grpc.ServiceDesc for GRPCServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserver.GRPCServer",
	HandlerType: (*GRPCServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _GRPCServer_GetInfo_Handler,
		},
		{
			MethodName: "GetSubsystems",
			Handler:    _GRPCServer_GetSubsystems_Handler,
		},
		{
			MethodName: "EnableSubsystem",
			Handler:    _GRPCServer_EnableSubsystem_Handler,
		},
		{
			MethodName: "DisableSubsystem",
			Handler:    _GRPCServer_DisableSubsystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
